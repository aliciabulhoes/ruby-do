# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `rack-accept` gem.
# Please instead update this file by running `bin/tapioca gem rack-accept`.

module Rack::Accept
  class << self
    def new(app, &block); end
  end
end

class Rack::Accept::Charset
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  def matches(charset); end
  def name; end
  def qvalue(charset); end
end

class Rack::Accept::Context
  def initialize(app); end

  def app; end
  def call(env); end
  def charsets=(charsets); end
  def encodings=(encodings); end
  def languages=(languages); end
  def media_types=(media_types); end

  private

  def add_check(header_name, values); end
  def check!(request); end
end

class Rack::Accept::Context::AcceptError < ::StandardError; end

class Rack::Accept::Encoding
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  def matches(encoding); end
  def name; end
  def qvalue(encoding); end
end

module Rack::Accept::Header
  include ::Rack::Accept::Header::PublicInstanceMethods

  private

  def join(qvalues); end
  def normalize_qvalue(q); end
  def parse(header); end
  def parse_media_type(media_type); end
  def parse_range_params(params); end

  class << self
    def join(qvalues); end
    def normalize_qvalue(q); end
    def parse(header); end
    def parse_media_type(media_type); end
    def parse_range_params(params); end
  end
end

Rack::Accept::Header::ALLOWED_CHARACTERS = T.let(T.unsafe(nil), Regexp)

module Rack::Accept::Header::PublicInstanceMethods
  def initialize(header = T.unsafe(nil)); end

  def accept?(value); end
  def best_of(values, keep_unacceptables = T.unsafe(nil)); end
  def name; end
  def qvalue(value); end
  def qvalues; end
  def qvalues=(_arg0); end
  def sort(values, keep_unacceptables = T.unsafe(nil)); end
  def sort_with_qvalues(values, keep_unacceptables = T.unsafe(nil)); end
  def to_s; end
  def value; end
  def values; end
end

class Rack::Accept::Language
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  def first_level_match=(_arg0); end
  def matches(language); end
  def name; end
  def qvalue(language); end
end

class Rack::Accept::MediaType
  include ::Rack::Accept::Header::PublicInstanceMethods
  include ::Rack::Accept::Header

  def initialize(header); end

  def matches(media_type); end
  def name; end
  def parse_media_type(media_type); end
  def qvalue(media_type); end

  private

  def params_match?(params, match); end
end

class Rack::Accept::Request < ::Rack::Request
  def initialize(env); end

  def best_charset(values); end
  def best_encoding(values); end
  def best_language(values); end
  def best_media_type(values); end
  def charset; end
  def charset?(value); end
  def encoding; end
  def encoding?(value); end
  def env; end
  def language; end
  def language?(value); end
  def media_type; end
  def media_type?(value); end
end

class Rack::Accept::Response < ::Rack::Response
  def not_acceptable!; end
end
